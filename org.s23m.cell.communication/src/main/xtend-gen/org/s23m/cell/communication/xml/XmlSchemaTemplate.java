package org.s23m.cell.communication.xml;

import java.util.ArrayList;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.BooleanExtensions;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;

@SuppressWarnings("all")
public class XmlSchemaTemplate {
  private static String XSD_NAMESPACE_PREFIX = "xsd";
  
  private static String TARGET_NAMESPACE_PREFIX = "s23m";
  
  private static String TARGET_NAMESPACE_VALUE = "http://schemas.s23m.org/serialization/2012";
  
  public CharSequence createHumanReadableSchema() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<xsd:schema xmlns:");
    _builder.append(XmlSchemaTemplate.XSD_NAMESPACE_PREFIX, "");
    _builder.append("=\"http://www.w3.org/2001/XMLSchema\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("xmlns:");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "		");
    _builder.append("=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_VALUE, "		");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("targetNamespace=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_VALUE, "		");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("elementFormDefault=\"qualified\"");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("attributeFormDefault=\"unqualified\">");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<!-- Reused elements -->\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    CharSequence _element = this.element("semanticIdentity", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:identityReference");
    _builder.append(_element, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _element_1 = this.element("model", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:model");
    _builder.append(_element_1, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _element_2 = this.element("category", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:identityReference");
    _builder.append(_element_2, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _element_3 = this.element("isAbstract", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:identityReference");
    _builder.append(_element_3, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _element_4 = this.element("maxCardinality", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:identityReference");
    _builder.append(_element_4, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _element_5 = this.element("minCardinality", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:identityReference");
    _builder.append(_element_5, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _element_6 = this.element("isContainer", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:identityReference");
    _builder.append(_element_6, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _element_7 = this.element("isNavigable", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:identityReference");
    _builder.append(_element_7, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _element_8 = this.element("from", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:identityReference");
    _builder.append(_element_8, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _element_9 = this.element("to", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:identityReference");
    _builder.append(_element_9, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _element_10 = this.element("function", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:function");
    _builder.append(_element_10, "	");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<xsd:complexType name=\"identityReference\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<xsd:sequence>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<xsd:element name=\"uniqueRepresentationReference\" type=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "			");
    _builder.append(":uuid\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("<xsd:element name=\"identifier\" type=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "			");
    _builder.append(":uuid\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("</xsd:sequence>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</xsd:complexType>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<xsd:complexType name=\"category\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<xsd:sequence>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<xsd:element ref=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "			");
    _builder.append(":semanticIdentity\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("<xsd:element ref=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "			");
    _builder.append(":category\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("</xsd:sequence>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</xsd:complexType>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<xsd:simpleType name=\"uuid\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<xsd:restriction base=\"xsd:string\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</xsd:simpleType>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<!-- Root element -->");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<xsd:element name=\"artifactSet\" type=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "	");
    _builder.append(":artifactSet\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<xsd:complexType name=\"artifactSet\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<xsd:sequence>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<xsd:element ref=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "			");
    _builder.append(":model\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("<xsd:element name=\"semanticDomain\" type=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "			");
    _builder.append(":semanticDomain\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("</xsd:sequence>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</xsd:complexType>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<!-- Encoding of model artifacts -->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<xsd:complexType name=\"model\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<xsd:complexContent>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<xsd:extension base=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "			");
    _builder.append(":graph\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("</xsd:complexContent>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</xsd:complexType>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    CharSequence _element_11 = this.element("container", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:identityReference");
    CharSequence _elementRef = this.elementRef("\u00ABTARGET_NAMESPACE_PREFIX\u00BB:isAbstract");
    CharSequence _elementList = this.elementList("vertex", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:vertex");
    CharSequence _elementList_1 = this.elementList("visibility", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:visibility");
    CharSequence _elementList_2 = this.elementList("edge", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:edge");
    CharSequence _elementList_3 = this.elementList("superSetReference", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:superSetReference");
    CharSequence _elementList_4 = this.elementList("command", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:command");
    CharSequence _elementList_5 = this.elementList("query", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:query");
    ArrayList<CharSequence> _newArrayList = CollectionLiterals.<CharSequence>newArrayList(_element_11, _elementRef, _elementList, _elementList_1, _elementList_2, _elementList_3, _elementList_4, _elementList_5);
    CharSequence _categoryComplexType = this.categoryComplexType("graph", _newArrayList);
    _builder.append(_categoryComplexType, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<!-- Vertices --> ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<xsd:complexType name=\"vertex\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<xsd:complexContent>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<xsd:extension base=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "			");
    _builder.append(":category\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("<xsd:sequence>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<xsd:element ref=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "					");
    _builder.append(":isAbstract\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("<xsd:element ref=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "					");
    _builder.append(":maxCardinality\"/>\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("</xsd:sequence>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</xsd:extension>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</xsd:complexContent>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</xsd:complexType>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<!-- Arrows --> ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    CharSequence _elementRef_1 = this.elementRef("\u00ABTARGET_NAMESPACE_PREFIX\u00BB:isAbstract");
    CharSequence _elementRef_2 = this.elementRef("\u00ABTARGET_NAMESPACE_PREFIX\u00BB:from");
    CharSequence _elementRef_3 = this.elementRef("\u00ABTARGET_NAMESPACE_PREFIX\u00BB:to");
    ArrayList<CharSequence> _newArrayList_1 = CollectionLiterals.<CharSequence>newArrayList(_elementRef_1, _elementRef_2, _elementRef_3);
    CharSequence _categoryComplexType_1 = this.categoryComplexType("superSetReference", _newArrayList_1);
    _builder.append(_categoryComplexType_1, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _elementRef_4 = this.elementRef("\u00ABTARGET_NAMESPACE_PREFIX\u00BB:isAbstract");
    CharSequence _elementRef_5 = this.elementRef("\u00ABTARGET_NAMESPACE_PREFIX\u00BB:from");
    CharSequence _elementRef_6 = this.elementRef("\u00ABTARGET_NAMESPACE_PREFIX\u00BB:to");
    ArrayList<CharSequence> _newArrayList_2 = CollectionLiterals.<CharSequence>newArrayList(_elementRef_4, _elementRef_5, _elementRef_6);
    CharSequence _categoryComplexType_2 = this.categoryComplexType("visibility", _newArrayList_2);
    _builder.append(_categoryComplexType_2, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _elementRef_7 = this.elementRef("\u00ABTARGET_NAMESPACE_PREFIX\u00BB:isAbstract");
    CharSequence _element_12 = this.element("from", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:edgeEnd");
    CharSequence _element_13 = this.element("to", "\u00ABTARGET_NAMESPACE_PREFIX\u00BB:edgeEnd");
    ArrayList<CharSequence> _newArrayList_3 = CollectionLiterals.<CharSequence>newArrayList(_elementRef_7, _element_12, _element_13);
    CharSequence _categoryComplexType_3 = this.categoryComplexType("edge", _newArrayList_3);
    _builder.append(_categoryComplexType_3, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _elementRef_8 = this.elementRef("\u00ABTARGET_NAMESPACE_PREFIX\u00BB:isAbstract");
    CharSequence _elementRef_9 = this.elementRef("\u00ABTARGET_NAMESPACE_PREFIX\u00BB:minCardinality");
    CharSequence _elementRef_10 = this.elementRef("\u00ABTARGET_NAMESPACE_PREFIX\u00BB:maxCardinality");
    CharSequence _elementRef_11 = this.elementRef("\u00ABTARGET_NAMESPACE_PREFIX\u00BB:isContainer");
    CharSequence _elementRef_12 = this.elementRef("\u00ABTARGET_NAMESPACE_PREFIX\u00BB:isNavigable");
    ArrayList<CharSequence> _newArrayList_4 = CollectionLiterals.<CharSequence>newArrayList(_elementRef_8, _elementRef_9, _elementRef_10, _elementRef_11, _elementRef_12);
    CharSequence _categoryComplexType_4 = this.categoryComplexType("edgeEnd", _newArrayList_4);
    _builder.append(_categoryComplexType_4, "	");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<!-- Artifact functionality -->");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<xsd:complexType name=\"function\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<xsd:complexContent>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<xsd:extension base=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "			");
    _builder.append(":category\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("<xsd:sequence>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("<xsd:element name=\"parameter\" type=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "					");
    _builder.append(":parameter\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("</xsd:sequence>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</xsd:extension>\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</xsd:complexContent>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</xsd:complexType>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<xsd:complexType name=\"parameter\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<xsd:complexContent>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<xsd:extension base=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "			");
    _builder.append(":category\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("</xsd:complexContent>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</xsd:complexType>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<xsd:complexType name=\"command\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<xsd:complexContent>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<xsd:extension base=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "			");
    _builder.append(":function\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("</xsd:complexContent>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</xsd:complexType>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<xsd:complexType name=\"query\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<xsd:complexContent>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<xsd:extension base=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "			");
    _builder.append(":function\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("</xsd:complexContent>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</xsd:complexType>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<!-- Encoding of semantic domain artifacts -->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<xsd:complexType name=\"semanticDomain\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<xsd:sequence>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<xsd:element ref=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "			");
    _builder.append(":model\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("<xsd:element name=\"identity\" type=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "			");
    _builder.append(":identity\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("</xsd:sequence>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</xsd:complexType>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<xsd:complexType name=\"identity\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<xsd:sequence>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<xsd:element name=\"identifier\" type=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "			");
    _builder.append(":uuid\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("<xsd:element name=\"name\" type=\"xsd:string\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<xsd:element name=\"pluralName\" type=\"xsd:string\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<xsd:element name=\"payload\" type=\"xsd:string\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<xsd:element name=\"technicalName\" type=\"xsd:string\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</xsd:sequence>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</xsd:complexType>");
    _builder.newLine();
    _builder.append("</xsd:schema>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence createMachineReadableSchema() {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  private CharSequence categoryComplexType(final String name, final List<CharSequence> elementsInSequence) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<xsd:complexType name=\"");
    _builder.append(name, "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<xsd:complexContent>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<xsd:extension base=\"");
    _builder.append(XmlSchemaTemplate.TARGET_NAMESPACE_PREFIX, "		");
    _builder.append(":category\">");
    _builder.newLineIfNotEmpty();
    {
      boolean _isEmpty = elementsInSequence.isEmpty();
      boolean _operator_not = BooleanExtensions.operator_not(_isEmpty);
      if (_operator_not) {
        _builder.append("\t\t\t");
        _builder.append("<xsd:sequence>");
        _builder.newLine();
        {
          for(final CharSequence element : elementsInSequence) {
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append(element, "				");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t\t");
        _builder.append("</xsd:sequence>");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("</xsd:extension>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</xsd:complexContent>");
    _builder.newLine();
    _builder.append("</xsd:complexType>");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence element(final String name, final String type) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<");
    _builder.append(XmlSchemaTemplate.XSD_NAMESPACE_PREFIX, "");
    _builder.append(":element name=\"");
    _builder.append(name, "");
    _builder.append("\" type=\"");
    _builder.append(type, "");
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence elementRef(final String referencedName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<");
    _builder.append(XmlSchemaTemplate.XSD_NAMESPACE_PREFIX, "");
    _builder.append(":element ref=\"");
    _builder.append(referencedName, "");
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence elementList(final String name, final String type) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<");
    _builder.append(XmlSchemaTemplate.XSD_NAMESPACE_PREFIX, "");
    _builder.append(":element name=\"");
    _builder.append(name, "");
    _builder.append("\" type=\"");
    _builder.append(type, "");
    _builder.append("\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
