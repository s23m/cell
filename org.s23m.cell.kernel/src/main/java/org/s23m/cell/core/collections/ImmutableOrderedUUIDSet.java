/* ***** BEGIN LICENSE BLOCK ***** * Version: MPL 1.1 * * The contents of this file are subject to the Mozilla Public License Version * 1.1 (the "License"); you may not use this file except in compliance with * the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License * for the specific language governing rights and limitations under the * License. * * The Original Code is S23M. * * The Initial Developer of the Original Code is * The S23M Foundation. * Portions created by the Initial Developer are * Copyright (C) 2012 The S23M Foundation. * All Rights Reserved. * * Contributor(s): * Andrew Shewring * ***** END LICENSE BLOCK ***** */package org.s23m.cell.core.collections;import java.util.HashSet;import java.util.Set;import java.util.UUID;/** * An immutable ordered set of {@link UUID}s with constant-time * performance for <code>contains</code> and <code>get</code> methods. */public class ImmutableOrderedUUIDSet {	private final UUID[] insertionOrder;	private final Set<UUID> elements;	public ImmutableOrderedUUIDSet(final FixedSizeIterable<UUID> sequence) {		final int size = sequence.size();		insertionOrder = new UUID[size];		elements = new HashSet<UUID>(size);		int i = 0;		for (final UUID uuid : sequence) {			elements.add(uuid);			insertionOrder[i] = uuid;			i++;		}	}	public boolean contains(final Object o) {		return elements.contains(o);	}	public UUID get(final int index) {		return insertionOrder[index];	}}