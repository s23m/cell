/* ***** BEGIN LICENSE BLOCK ***** * Version: MPL 1.1 * * The contents of this file are subject to the Mozilla Public License Version * 1.1 (the "License"); you may not use this file except in compliance with * the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License * for the specific language governing rights and limitations under the * License. * * The Original Code is S23M. * * The Initial Developer of the Original Code is * The S23M Foundation. * Portions created by the Initial Developer are * Copyright (C) 2012 The S23M Foundation. * All Rights Reserved. * * Contributor(s): * Andrew Shewring * ***** END LICENSE BLOCK ***** */package org.s23m.cell.core.collections;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.Iterator;import java.util.UUID;public class KernelUUIDSequence implements FixedSizeIterable<UUID> {	private final int sequenceLength;	private final LazyValue<Iterator<UUID>> uuidIteratorHolder;	public static enum SequenceIdentifier {		ANONYMOUS_USE("anonymous-use-uuids.txt"),		EXTENDED_JAVA_BOOTSTRAPPING("extended-java-bootstrapping-uuids.txt"),		OPEN_SOURCE_CORE("open-source-core-uuids.txt");		private String resourceName;		private SequenceIdentifier(final String resourceName) {			this.resourceName = resourceName;		}	}	public KernelUUIDSequence(final SequenceIdentifier sequenceIdentifier, final int sequenceLength) {		if (sequenceLength < 0) {			throw new IllegalArgumentException("Sequence length must be positive");		}		this.sequenceLength = sequenceLength;		this.uuidIteratorHolder = new LazyValue<Iterator<UUID>>() {			@Override			protected Iterator<UUID> computeValue() {				final String resourceName = sequenceIdentifier.resourceName;				final String path = "/" + resourceName;				final InputStream inputStream = KernelUUIDSequence.class.getResourceAsStream(path);				if (inputStream == null) {					throw new IllegalArgumentException("Could not find resource for path '" + path + "'");				}				final InputStreamReader reader = new InputStreamReader(inputStream);				final BufferedReader bufferedReader = new BufferedReader(reader);				return new Iterator<UUID>() {					private int index = 0;					public boolean hasNext() {						return index < sequenceLength;					}					public UUID next() {						try {							final String line = bufferedReader.readLine();							try {								return UUID.fromString(line);							} catch (final Exception e) {								throw new IllegalStateException("Could not convert '" + line + "' to a UUID", e);							}						} catch (final IOException e) {							attemptToCloseReader();							throw new IllegalStateException("Encountered error while reading line", e);						} finally {							// advance index							index++;							if (!hasNext()) {								attemptToCloseReader();							}						}					}					public void remove() {						throw new UnsupportedOperationException("Not implemented: read-only sequence");					}					private void attemptToCloseReader() {						try {							bufferedReader.close();						} catch (final Exception e) {							// ignore						}					}				};			}		};	}	public Iterator<UUID> iterator() {		return uuidIteratorHolder.get();	}	public int size() {		return sequenceLength;	}}