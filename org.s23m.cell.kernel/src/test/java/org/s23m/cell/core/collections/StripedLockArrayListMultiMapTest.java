/* ***** BEGIN LICENSE BLOCK ***** * Version: MPL 1.1 * * The contents of this file are subject to the Mozilla Public License Version * 1.1 (the "License"); you may not use this file except in compliance with * the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License * for the specific language governing rights and limitations under the * License. * * The Original Code is S23M. * * The Initial Developer of the Original Code is * The S23M Foundation. * Portions created by the Initial Developer are * Copyright (C) 2012 The S23M Foundation. * All Rights Reserved. * * Contributor(s): * Andrew Shewring * ***** END LICENSE BLOCK ***** */package org.s23m.cell.core.collections;import java.util.ArrayList;import java.util.List;import org.s23m.cell.core.collections.StripedLockArrayListMultiMap;import junit.framework.TestCase;public class StripedLockArrayListMultiMapTest extends TestCase {	public void testRemoveKey() {		final StripedLockArrayListMultiMap<String, Integer> s = new StripedLockArrayListMultiMap<String, Integer>();		final String key = "key";		s.put(key, 1);		s.put(key, 2);		s.put(key, 3);		assertEquals(createList(1,2,3), s.get(key));		s.remove(key);		assertNull(s.get(key));	}	public void testRemoveKeyValue() {		final StripedLockArrayListMultiMap<String, Integer> s = new StripedLockArrayListMultiMap<String, Integer>();		final String key = "key";		s.put(key, 1);		s.put(key, 2);		s.put(key, 3);		assertEquals(createList(1,2,3), s.get(key));		s.remove(key, 1);		assertEquals(createList(2,3), s.get(key));		s.remove(key, 2);		assertEquals(createList(3), s.get(key));		s.remove(key, 3);		assertNull(s.get(key));		assertFalse(s.containsKey(key));	}	private <T> List<T> createList(final T... elements) {		final List<T> result = new ArrayList<T>();		for (final T element : elements) {			result.add(element);		}		return result;	}}