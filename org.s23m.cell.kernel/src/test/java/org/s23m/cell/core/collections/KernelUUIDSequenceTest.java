/* ***** BEGIN LICENSE BLOCK ***** * Version: MPL 1.1 * * The contents of this file are subject to the Mozilla Public License Version * 1.1 (the "License"); you may not use this file except in compliance with * the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License * for the specific language governing rights and limitations under the * License. * * The Original Code is S23M. * * The Initial Developer of the Original Code is * The S23M Foundation. * Portions created by the Initial Developer are * Copyright (C) 2012 The S23M Foundation. * All Rights Reserved. * * Contributor(s): * Andrew Shewring * ***** END LICENSE BLOCK ***** */package org.s23m.cell.core.collections;import java.util.HashSet;import java.util.Set;import java.util.UUID;import junit.framework.TestCase;import org.s23m.cell.core.collections.KernelUUIDSequence.SequenceIdentifier;public class KernelUUIDSequenceTest extends TestCase {	public void testIterator() {		checkSequence(12000, SequenceIdentifier.ANONYMOUS_USE);		checkSequence(10000, SequenceIdentifier.EXTENDED_JAVA_BOOTSTRAPPING);		checkSequence(8000, SequenceIdentifier.OPEN_SOURCE_CORE);	}	public void testIteratorSequenceLengthMismatch() {		try {			checkSequence(20000, SequenceIdentifier.OPEN_SOURCE_CORE);			fail("Exception should have been thrown - more UUIDs specified than are available");		} catch (final IllegalStateException e) {			// expected		}	}	private void checkSequence(final int sequenceLength, final SequenceIdentifier identifier) {		final KernelUUIDSequence sequence = new KernelUUIDSequence(identifier, sequenceLength);		final Set<UUID> set = new HashSet<UUID>(sequenceLength);		int count = 0;		for (final UUID uuid : sequence) {			final boolean added = set.add(uuid);			assertTrue(added);			final int version = uuid.version();			assertEquals("Count: " + count, 1, version);			final int variant = uuid.variant();			assertEquals("Count: " + count, 2, variant);			count++;		}		assertEquals(count, sequenceLength);	}}