/* ***** BEGIN LICENSE BLOCK ***** * Version: MPL 1.1 * * The contents of this file are subject to the Mozilla Public License Version * 1.1 (the "License"); you may not use this file except in compliance with * the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License * for the specific language governing rights and limitations under the * License. * * The Original Code is S23M. * * The Initial Developer of the Original Code is * The S23M Foundation. * Portions created by the Initial Developer are * Copyright (C) 2012 The S23M Foundation. * All Rights Reserved. * * Contributor(s): * Andrew Shewring * ***** END LICENSE BLOCK ***** */package org.s23m.cell.core.collections;import java.util.HashSet;import java.util.Set;import java.util.UUID;import org.s23m.cell.core.collections.ImmutableOrderedUUIDSet;import org.s23m.cell.core.collections.UUIDSequence;import junit.framework.TestCase;public class ImmutableOrderedUUIDSetTest extends TestCase {	private static final UUID ALL_ZEROS = UUID.fromString("00000000-0000-0000-0000-000000000000");	public void testContains() {		final UUIDSequence sequence = new UUIDSequence(0, 0, 5);		final ImmutableOrderedUUIDSet set = new ImmutableOrderedUUIDSet(sequence);		final UUID contained = ALL_ZEROS;		assertTrue(set.contains(contained));		final UUID notContained = UUID.fromString("02848590-89cb-11df-a4ee-0800200c9a66");		assertFalse(set.contains(notContained));	}	public void testGet() {		final int sequenceLength = 5;		final UUIDSequence sequence = new UUIDSequence(0, 0, sequenceLength);		final ImmutableOrderedUUIDSet set = new ImmutableOrderedUUIDSet(sequence);		final UUID uuid = set.get(0);		assertEquals(ALL_ZEROS, uuid);		final Set<UUID> retrievedElements = new HashSet<UUID>();		for (int i = 1; i < sequenceLength; i++) {			final UUID value = set.get(i);			final boolean added = retrievedElements.add(value);			assertTrue(added);		}		try {			set.get(-1);			fail("Get should have thrown an exception for invalid parameter");		} catch (final ArrayIndexOutOfBoundsException e) {			// expected		}		try {			set.get(sequenceLength);			fail("Get should have thrown an exception for invalid parameter");		} catch (final ArrayIndexOutOfBoundsException e) {			// expected		}	}}