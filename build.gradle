buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.0.0')
  }
}

allprojects {
  apply plugin: 'com.jfrog.artifactory'
  group = 'org.s23m.cell'
  version = currentVersion
  status = 'Integration'
}

// skip publishing the root module
artifactoryPublish.skip = true

artifactory {
  clientConfig.setIncludeEnvVars(false)
  clientConfig.info.addEnvironmentProperty('date',new java.util.Date().toString())

  contextUrl = 'http://localhost:8081/artifactory'
  
  publish {
    repository {
      repoKey = 'libs-snapshot-local' // The Artifactory repository key to publish to
      username = "${ARTIFACTORY_USER}" // The publisher user name
      password = "${ARTIFACTORY_PASSWORD}" // The publisher password
    }
    defaults {
      // Reference to Gradle publications defined in the build script.
      // This is how we tell the Artifactory Plugin which artifacts should be
      // published to Artifactory.
      publications('mavenJava')
      publishArtifacts = true
      
      publishPom = true // Publish generated POM files to Artifactory (true by default)
      publishIvy = false // Publish generated Ivy descriptor files to Artifactory (true by default)
    }
  }
  resolve {
    repoKey = 'jcenter'
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply plugin: 'findbugs'
  apply plugin: 'pmd'
  apply plugin: 'maven-publish'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    mavenCentral()
  }
  
  dependencies {
    testCompile 'junit:junit:4.12'
  }
  
  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
        artifact(file("$rootDir/gradle.properties"))
      }
    }
  }

  /* JaCoCo */
 
  jacoco {
    toolVersion = '0.7.6.201602180812'
  }
  
  jacocoTestReport {
    reports {
      xml.enabled true
      html.destination file("$buildDir/reports/jacoco-html")
    }
  }
  
  check.dependsOn jacocoTestReport
 
  /* Findbugs */
  
  findbugs {
    ignoreFailures = true
  }
  
  tasks.withType(FindBugs) {
    reports {
      xml.enabled false
      html.enabled true
    }
  }
 
  /* PMD */

  pmd {
    ignoreFailures = true
    reportsDir = file("$buildDir/reports/pmd")
    ruleSets = ['java-basic', 'java-braces']
  }
  
  /* Tests */
  
  test {
    reports {
      junitXml.enabled true
      junitXml.destination = file("$buildDir/reports/junit-xml")
      html.enabled true
      html.destination = file("$buildDir/reports/junit-html")
    }
  }
  
  tasks.withType(Test) {
    maxHeapSize = '512m'

    jvmArgs '-XX:MaxPermSize=512m'
    
    /* Run tests in parallel */
    maxParallelForks = 4 /* Runtime.runtime.availableProcessors() */
  }
  
  /* 
   * Mechanism for exposing a project's test code to other projects through 'testArtifacts' configuration: 
   *
   * https://discuss.gradle.org/t/how-do-i-declare-a-dependency-on-a-modules-test-code/7172/7
   */
  
  configurations {
    testArtifacts.extendsFrom testRuntime
  }
  
  task testJar(type: Jar) {
    classifier 'test'
    from sourceSets.test.output
  }
  
  artifacts {
    testArtifacts testJar
  }
}

project(':platform') {
  dependencies {
    compile project(':kernel')
  }
}

project(':platform-instantiation') {
  dependencies {
    compile project(':kernel')
    compile project(':platform')
  }
}

project(':persistence') {
  dependencies {
    compile project(':kernel')
  }
}

project(':communication') {
  dependencies {
    compile project(':kernel')
    compile project(':platform')
    
    // tests depend on the other project's main and test code
    testCompile project (path: ':platform-instantiation', configuration: 'testArtifacts')
  }
}

project(':kernel-instantiation') {
  dependencies {
    compile project(':kernel')
  }
}
