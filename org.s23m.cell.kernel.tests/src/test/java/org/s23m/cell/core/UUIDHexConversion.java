/* ***** BEGIN LICENSE BLOCK ***** * Version: MPL 1.1 * * The contents of this file are subject to the Mozilla Public License Version * 1.1 (the "License"); you may not use this file except in compliance with * the License. You may obtain a copy of the License at * http://www.mozilla.org/MPL/ * * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License * for the specific language governing rights and limitations under the * License. * * The Original Code is S23M. * * The Initial Developer of the Original Code is * The S23M Foundation. * Portions created by the Initial Developer are * Copyright (C) 2012 The S23M Foundation. * All Rights Reserved. * * Contributor(s): * Andrew Shewring * ***** END LICENSE BLOCK ***** */package org.s23m.cell.core;import java.math.BigInteger;import java.util.UUID;class UUIDHexConversion {	// convert a String representing a base b integer into an int	public static BigInteger fromString(final String s, final int b) {		final String p = s.toUpperCase().replace("-", "");		BigInteger result = BigInteger.ZERO;		int digit = 0;		for (int i = 0; i < p.length(); i++) {			final char c = p.charAt(i);			if (c >= '0' && c <= '9') {				digit = c - '0';			} else if (c >= 'A' && c <= 'Z') {				digit = 10 + c - 'A';			} else {				inputError(s);			}			if (digit < b) {				result = result.multiply(BigInteger.valueOf(b)).add(BigInteger.valueOf(digit));			} else {				inputError(s);			}		}		return result;	}	public static void inputError(final String s) {		throw new RuntimeException("Input error with " + s);	}	public static BigInteger fromBinaryString(final String s) {		return fromString(s, 2);	}	public static BigInteger fromHexString(final String s) {		return fromString(s, 16);	}	public static void main(final String[] args) {		System.out.println("Initial OSC values: ");		render("02848590-89cb-11df-a4ee-0800200c9a66");		render("02848591-89cb-11df-a4ee-0800200c9a66");		render("02848592-89cb-11df-a4ee-0800200c9a66");		System.out.println("Initial anonymous values: ");		render("02848590-89cb-11df-a4ee-0800200c9a67");		render("02848591-89cb-11df-a4ee-0800200c9a67");		render("02848592-89cb-11df-a4ee-0800200c9a67");		System.out.println("Initial Ext values: ");		render("02848590-89cb-11df-a4ee-0800200c9a68");		render("02848591-89cb-11df-a4ee-0800200c9a68");		render("02848592-89cb-11df-a4ee-0800200c9a68");		System.out.println("Other experiments:");		// UUID.fromString(arg0)		// -6562298810401514904, 181416749425168863	}	private static void render(final String s) {		final BigInteger i = fromHexString(s);		final UUID u = UUID.fromString(s);		System.out.println(s + " -> " + i + " [ " + u.getLeastSignificantBits() + ", " + u.getMostSignificantBits() + "]");		System.out.println("Type: " + u.version());	}}